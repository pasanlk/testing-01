@model PrecisionPoint.Connector.Model.ConnectionViewModel
@using PrecisionPoint.Connector.Utility.Enums;
@{
    ViewData["Title"] = "Create Connection";
    var selectedTab = ViewData["tabId"];
    Mode currentMode = (Mode)ViewData["mode"];
    var typedSelectedTab = (ConnectionTab)ViewData["tabId"];
}


<div class="submain-page create-conn-page">
    <div class="d-flex justify-content-between">
        <h1 class="page-table-title">Connection</h1>

        @if (currentMode == Mode.View || currentMode == Mode.Edit)
        {
            <div class="conn-form-edit-del-btns">
                <form asp-action="DeleteConnection" class="d-flex">
                    <input type="hidden" asp-for="Id" />
                    <button type="button" class="btn d-flex align-items-center pp-btn-small pp-btn-edit" id="btnEdit">
                        <img src="~/img/edit-icon.svg" alt="edit-icon" />
                        <span>Edit</span>                        
                    </button>
                    <button type="button" class="btn d-flex align-items-center pp-btn-small pp-btn-delete" id="btnDelete">
                        <img src="~/img/delete-icon.svg" alt="edit-icon" />
                        <span>Delete</span>                        
                    </button>
                </form>
            </div>
        }
    </div>

    <div class="submain-container container-fluid container-form">
        <div class="row">
            <div class="col-md-12">
                <div class="container-fluid align-items-center custom-progress-bar-container">
                    <div class="container">
                        <div class="row align-items-start">
                            <div class="col custom-progress-bar-inner">
                                <div class="row">
                                    <span class="w-100 rounded mb-1 custom-progress-bar progress-bar-primary @(typedSelectedTab != ConnectionTab.Information ? "done" : "")">

                                    </span>
                                </div>
                                <div class="row">
                                    <img src="@(typedSelectedTab == ConnectionTab.Information ? "/img/progress-active-icon.svg" : "/img/progress-done-icon.svg")" alt="progress-icon" class="progress-bar-icon  @(typedSelectedTab != ConnectionTab.Information ? "done" : "")" />
                                    <span class="progress-bar-text @(typedSelectedTab == ConnectionTab.Information ? "active" : "done")">Information</span>
                                </div>
                            </div>
                            <div class="col custom-progress-bar-inner">
                                <div class="row">
                                    <span class="w-100 rounded mb-1 custom-progress-bar @(typedSelectedTab == ConnectionTab.SourceSetting ? "progress-bar-primary" : typedSelectedTab == ConnectionTab.DestinationSetting ? "progress-bar-primary done" : "progress-bar-grey")"></span>
                                </div>
                                <div class="row">
                                    <img src="@(typedSelectedTab == ConnectionTab.SourceSetting ? "/img/progress-active-icon.svg" : typedSelectedTab == ConnectionTab.DestinationSetting ? "/img/progress-done-icon.svg" : "/img/progress-icon.svg")" alt="progress-icon" class="progress-bar-icon  @(typedSelectedTab > ConnectionTab.SourceSetting ? "done" : "")" />
                                    <span class="progress-bar-text @(typedSelectedTab == ConnectionTab.SourceSetting ? "active" : typedSelectedTab == ConnectionTab.DestinationSetting ? "done" : "")">Source Settings</span>
                                </div>
                            </div>
                            <div class="col">
                                <div class="row">
                                    <span class="w-100 rounded mb-1 custom-progress-bar @(typedSelectedTab == ConnectionTab.DestinationSetting ? "progress-bar-primary" : "progress-bar-grey") "></span>
                                </div>
                                <div class="row align-items-center">
                                    <img src="@(typedSelectedTab == ConnectionTab.DestinationSetting ? "/img/progress-active-icon.svg" : "/img/progress-icon.svg")" alt="progress-icon" class="progress-bar-icon" />
                                    <span class="progress-bar-text @(typedSelectedTab == ConnectionTab.DestinationSetting ? "active" : "")">Destination Settings</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div id="partialViewContainer">
                        @switch (selectedTab)
                        {
                            case ConnectionTab.Information:
                                <partial name="_ConnectionInformation" model="@Model" />
                                break;
                            case ConnectionTab.SourceSetting:
                                <partial name="_ConnectionSource" model="@Model" />
                                break;
                            case ConnectionTab.DestinationSetting:
                                <partial name="_ConnectionDestination" model="@Model" />
                                break;
                            default:
                                <partial name="_ConnectionInformation" model="@Model" />
                                break;
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {

            //make input fields readonly based on the mode
            var currentMode = '@currentMode';
            var isReadonly;

            var preventDefaultHandler = function (event) {
                event.preventDefault();
            };

            if (currentMode != '@Mode.Create') {
                $('form input[type!="submit"][type!="button"], form select').prop('readonly', true);
                $('form select').on('mousedown keydown', preventDefaultHandler);
                isReadonly = true;
            }
            if (currentMode === '@Mode.Edit') {

                $('#Information_Mode').prop({
                    'readonly': false
                });

                $('#SourceSetting_Port, #SourceSetting_EnvironmentName, #SourceSetting_CompanyId, #SourceSetting_CompanyName, #SourceSetting_ClientId, #SourceSetting_ClientSecret, #SourceSetting_AccountKey, #SourceSetting_SharedAccessSignature, #SourceSetting_SourceDescription, #SourceSetting_Mode').prop({
                    'readonly': false
                });

                $('#DestinationSetting_DatabaseTypeId, #DestinationSetting_SqlUserName, #DestinationSetting_SqlPassword, #DestinationSetting_PricingTier, #DestinationSetting_Mode').prop({
                    'readonly': false
                });

                $('#databaseTypeDropdown, #DestinationSetting_PricingTier').off('mousedown keydown', preventDefaultHandler);
            }

            //TODO: enums
            // Display fields for the default connector type
            if ($('.connector-dropdown').val() == 1) {
                $('#businessCentralFields').show();
                $('#dataLakeFields').hide();
            } else {
                $('#businessCentralFields').hide();
                $('#dataLakeFields').show();
            }

            //TODO : use enum
            if ($('.key-dropdown').val() == 1) {
                $('#sharedAccessSignature').hide();
                $('#accountKey').show();
            } else {
                $('#accountKey').hide();
                $('#sharedAccessSignature').show();
            }

            // Display fields for the database type
            if ($('#databaseTypeDropdown').val() != 2) {
                $('.pricing-tier').hide();
            } else {
                $('.pricing-tier').show();
            }

            // Conditionally display fields based on selected connector type
            $('.connector-dropdown').change(function () {
                var selectedType = $(this).val();

                //TODO : use enum
                if (selectedType === '1') {
                    $('#dataLakeFields').hide();
                    $('#businessCentralFields').show();
                } else {
                    $('#businessCentralFields').hide();
                    $('#dataLakeFields').show();
                }

                $('.connector-dropdown').val(selectedType);
            });

            // Conditionally display fields based on selected key type
            $('.key-dropdown').change(function () {
                var selectedType = $(this).val();

                //TODO : use enum
                if (selectedType === '1') {
                    $('#sharedAccessSignature').hide();
                    $('#accountKey').show();
                } else {
                    $('#accountKey').hide();
                    $('#sharedAccessSignature').show();
                }

                $('#SourceSetting_SharedAccessSignature').next('span').empty();
                $('#SourceSetting_AccountKey').next('span').empty();

            });

            // Conditionally display fields based on selected database type
            $('#databaseTypeDropdown').change(function () {
                var selectedType = $(this).val();

                //TODO : use enum
                if (selectedType === '2') {
                    $('.pricing-tier').show();
                } else {
                    $('.pricing-tier').hide();
                }
                $('#DestinationSetting_PricingTier').val('');
                //clear error message
                $('#DestinationSetting_PricingTier').next('span').empty();
            });

            $('#btnEdit').click(function () {

                currentMode = (currentMode === '@Mode.View' ? '@Mode.Edit' : '@Mode.View');
                isReadonly = !isReadonly;

                $('#Information_Mode, #SourceSetting_Mode, #DestinationSetting_Mode').prop({
                    'readonly': isReadonly
                });

                var baseUrl = '@Url.Action("GoToPrevious", "Connection")';
                var urlWithParams = baseUrl + '?tabId=' + '@selectedTab' + '&mode=' + currentMode;

                $.ajax({
                    url: urlWithParams,
                    type: 'GET',
                    success: function (response) {
                        console.log('Success:'); //TODO
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });

                $('#Information_Mode, #SourceSetting_Mode, #DestinationSetting_Mode').val(currentMode);

                $('#SourceSetting_Port, #SourceSetting_EnvironmentName, #SourceSetting_CompanyId, #SourceSetting_CompanyName, #SourceSetting_ClientId, #SourceSetting_ClientSecret, #SourceSetting_AccountKey, #SourceSetting_SharedAccessSignature, #SourceSetting_SourceDescription, #SourceSetting_Mode').prop({
                    'readonly': isReadonly
                });

                $('#DestinationSetting_DatabaseTypeId, #DestinationSetting_SqlUserName, #DestinationSetting_SqlPassword, #DestinationSetting_PricingTier').prop({
                    'readonly': isReadonly
                });

                $('.key-dropdown, #databaseTypeDropdown, #DestinationSetting_PricingTier').off('mousedown keydown', preventDefaultHandler);
            });

            $('#btnDelete').click(function (event) {

                event.preventDefault();

                if (confirm("Are you sure you want to delete this connection?")) {
                    $(this).closest('form').submit();
                }
            });

            $('#SourceSetting_AccountKey').on('input', function () {
                $('#SourceSetting_SharedAccessSignature').val('');
            });

            $('#SourceSetting_SharedAccessSignature').on('input', function () {
                $('#SourceSetting_AccountKey').val('');
            });

        });
    </script>
}
